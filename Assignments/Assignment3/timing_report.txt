This comparison is for my code ran on Scinet gpc development node:
Here is the comparison between the timing of running the whole code using the original ants code(ants_orig.cc) and my
own modularized code(ants.cpp) as well as timing each time step of calculating the new number of ants on the table
using ticktock code provided in the git repository(which I cloned to get the files):

My modularized code took 0.3383 seconds to run the whole code with each time step taking between 0.008141 and 0.008155
seconds.
The original code took 0.2548 seconds to run the whole code with each time step taking between 0.006045 and 0.006082
seconds.
So to conclude, my modularized code is a bit slower than the original code as a whole and also for each time step,
but modularizing it makes it easier to read the main code and to debug it.

Here is the result of using time ./ants for my modularized code to see the where the code is spending its most time on:
real 0m0.339s
user 0m0.329s
sys  0m0.002s

and here is the same timing for the original code:
real	 0m0.277s
user	 0m0.273s
sys	 0m0.000s

So for both codes wall time and actual user time are the main bottlenecks of the code and system time is very small.

Here are the results of profiling both codes using gprof (the output files can be found in ant_gmon.out for my modularized
code and in ants_orig_gmon.txt for the original code profiling):
In my modularized code, my single_time_step() function is taking most of the time. Lines 33 and 39 in single_time_step.cpp are
the lines that take most of the computing time. These lines are figuring out the number of ants where some ants do not move
and also assigning new number of ants based on the ones that do move.
In the original code, the part that takes most of the time are lines 60, 64 and 67. These lines are also calculating the
velocity of the ants in y direction (dj = 1.9*cos(velocity_of_ants[i][j])), computing new number of ants when some of those
do not walk and also assigning new number of ants when some do walk. So the lines that take most of the time in the original
code are the same as the ones that take most of the running time in my modularized code. 

Suggestions for making the code faster could be try to fit as many of the stuff in the same loop as possible such that the
number of loops used is smaller and it avoids repeatition of similar loops.
Another way of making the code faster could be to not pass the new number of ants to a new array, just store it in a variable and pass it as a variable as the return of the function so we allocate less memory to a table of 356 by 356 in this case.
